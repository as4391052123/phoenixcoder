stages:
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Python 服务端测试
test-server:
  stage: test
  image: python:3.13-slim
  services:
    - docker:dind
  before_script:
    - pip install --upgrade pip
    - pip install pytest pytest-asyncio httpx
  script:
    - cd phoenixcoder-server
    - pip install -r requirements.txt
    - python -c "import main; print('Server imports successfully')"
  only:
    - merge_requests
    - main
    - develop

# OIDC 服务端测试
test-oidc-server:
  stage: test
  image: python:3.13-slim
  services:
    - docker:dind
  before_script:
    - pip install --upgrade pip
    - pip install pytest pytest-asyncio httpx
  script:
    - cd phoenixcoder-oidc-server
    - pip install -r requirements.txt
    - pip install -r requirements-test.txt
    - python -m pytest tests/ -v --tb=short
  only:
    - merge_requests
    - main
    - develop

# 小程序端测试
test-miniapp:
  stage: test
  image: node:18-alpine
  before_script:
    - npm install -g @tarojs/cli
  script:
    - cd phoenixcoder-miniapp
    - npm install
    - npm run build:weapp
  only:
    - merge_requests
    - main
    - develop

# 管理端测试
test-admin:
  stage: test
  image: node:18-alpine
  before_script:
    - npm install -g npm@latest
  script:
    - cd phoenixcoder-admin
    - npm install
    - npm run build
  only:
    - merge_requests
    - main
    - develop

# 构建 Docker 镜像
build-server:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd phoenixcoder-server
    - docker build -t $CI_REGISTRY_IMAGE/server:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE/server:$CI_COMMIT_SHA
    - |
      if [ "$CI_COMMIT_BRANCH" = "main" ]; then
        docker tag $CI_REGISTRY_IMAGE/server:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/server:latest
        docker push $CI_REGISTRY_IMAGE/server:latest
      fi
  only:
    - main
    - develop

build-oidc-server:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd phoenixcoder-oidc-server
    - docker build -t $CI_REGISTRY_IMAGE/oidc-server:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE/oidc-server:$CI_COMMIT_SHA
    - |
      if [ "$CI_COMMIT_BRANCH" = "main" ]; then
        docker tag $CI_REGISTRY_IMAGE/oidc-server:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/oidc-server:latest
        docker push $CI_REGISTRY_IMAGE/oidc-server:latest
      fi
  only:
    - main
    - develop

build-admin:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd phoenixcoder-admin
    - docker build -t $CI_REGISTRY_IMAGE/admin:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE/admin:$CI_COMMIT_SHA
    - |
      if [ "$CI_COMMIT_BRANCH" = "main" ]; then
        docker tag $CI_REGISTRY_IMAGE/admin:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/admin:latest
        docker push $CI_REGISTRY_IMAGE/admin:latest
      fi
  only:
    - main
    - develop

# 部署到开发环境
deploy-dev:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$DEV_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no $DEV_USER@$DEV_HOST "cd /opt/phoenixcoder && git pull origin develop"
    - ssh -o StrictHostKeyChecking=no $DEV_USER@$DEV_HOST "cd /opt/phoenixcoder && docker-compose -f docker-compose.dev.yml up -d --build"
  environment:
    name: development
    url: https://dev.phoenixcoder.com
  only:
    - develop

# 部署到生产环境
deploy-prod:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$PROD_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no $PROD_USER@$PROD_HOST "cd /opt/phoenixcoder && git pull origin main"
    - ssh -o StrictHostKeyChecking=no $PROD_USER@$PROD_HOST "cd /opt/phoenixcoder && docker-compose -f docker-compose.prod.yml up -d --build"
  environment:
    name: production
    url: https://phoenixcoder.com
  when: manual
  only:
    - main
